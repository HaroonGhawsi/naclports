#summary How to check code into naclports

Here's a few quick tips for checkins to naclports.
  * If you haven't been through the HowTo_Checkout page already, please do so.
  * Please use 'gcl' from depot_tools to create your change-list and send it out for review to native-client-reviews. Watch review traffic on the list if you are not familiar with local customs for code reviews. You will need to set up an [https://www.google.com/accounts/b/0/IssuedAuthSubTokens App-Specific Password] in order to use the code review tool.
  * If you are not a Google employee you need to submit a completed Contributor License Agreement as described on the [http://www.chromium.org/developers/contributing-code Chromium "Contributing Code" page].

Once you have an LGTM for your change list, if you are a member of the naclports project, then follow these steps:
  * Be sure your naclports repo is set up to use https, not http. You can check this with "svn info". The "URL" should start with "https://".
  * Normal "gcl commit _changelistname_" is the command to use to commit your change. However, local custom has it that this commonly fails for your first submit to naclports. In this case use "svn commit --username=_naclports-username_ _list-of-filenames_".
  * You will likely be prompted for a password for your commit. For @google.com accounts you can find your password on this page: https://code.google.com/hosting/settings

If you not a member of the naclports project, ask one of your reviewers to finish submitting your CL. Once you have submitted a few CLs and demonstrated you know how to stay out of trouble then you can ask one of the project administrators to add you as a naclports project member. 

== Using Git ==

Checking in via a git checkout is possible and requires git-svn.

The first step is to configure git-svn with the following commands:

{{{
git svn init https://naclports.googlecode.com/svn -Ttrunk/src
git config svn-remote.svn.fetch trunk/src:refs/remotes/origin/master
git svn fetch
}}}

Assuming your git checkout is relatively recent the final command
should not not actually import any revisions and should return very
quickly.

To upload a change for review use:

{{{
git cl upload
}}}

To commit a change back to svn use:

{{{
git cl dcommit
}}}